generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            Int          @id(map: "users_pk") @unique(map: "users_un_id") @default(autoincrement())
  email         String       @unique(map: "users_un_email") @db.VarChar
  password      String       @db.VarChar
  username      String       @unique(map: "users_un_username") @db.VarChar
  create_at     DateTime     @default(now()) @db.Timestamptz(2)
  refresh_token String?      @db.VarChar
  posts         posts[]
  comments      comments[]
  post_liked    post_liked[]
}

model posts {
  id            Int          @id(map: "posts_pk") @default(autoincrement())
  user_id       Int
  post_username String       @db.VarChar
  post_title    String       @db.VarChar
  post_content  String
  created_at    DateTime     @default(now()) @db.Timestamptz(2)
  comments      comments[]
  post_liked    post_liked[]
  user          user         @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "posts_fk")
}

model comments {
  id              Int      @id(map: "comments_pk") @default(autoincrement())
  user_id         Int
  post_id         Int
  comment_content String
  created_at      DateTime @default(now()) @db.Timestamptz(2)
  posts           posts    @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "comments_fk")
  user            user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "comments_user_fk")
}

model post_liked {
  id      Int   @id @default(autoincrement())
  post_id Int
  user_id Int
  posts   posts @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "post_liked_fk")
  user    user  @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "post_liked_fk_1")

  @@unique([user_id, post_id], map: "post_liked_un")
}
